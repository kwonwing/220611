{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport CustomerDataService from \"@/services/CustomerDataService\";\nimport Tutorial from \"../tutorials/Tutorial.vue\";\nimport AddTutorial from \"../tutorials/AddTutorial.vue\";\nimport TutorialsList from \"../tutorials/TutorialsList.vue\";\nimport TutorialDataService from \"@/services/TutorialDataService\";\nexport default {\n  components: {\n    Tutorial: Tutorial,\n    AddTutorial: AddTutorial,\n    TutorialsList: TutorialsList\n  },\n  name: \"add-customer\",\n  data: function data() {\n    // 객체 , 변수 초기화\n    return {\n      customer: {\n        id: null,\n        firstName: \"\",\n        lastName: \"\",\n        email: \"\",\n        phone: \"\"\n      },\n      submitted: false\n    };\n  },\n  methods: {\n    // 저장 메소드 호출\n    saveCustomer: function saveCustomer() {\n      var _this = this;\n\n      //  회원 임시 객체 만들기\n      var data = {\n        firstName: this.customer.firstName,\n        lastName: this.customer.lastName,\n        email: this.customer.email,\n        phone: this.customer.phone\n      }; //  임시 회원 객체를 서버쪽으로 전달해서 DB에 insert 요청\n\n      CustomerDataService.create(data) //  성공하면 then으로 들어옴\n      .then(function (response) {\n        _this.customer.id = response.data.id;\n        _this.submitted = true; // DB insert 성공\n      }) //  실패하면 catch으로 에러메세지가 들어옴\n      [\"catch\"](function (e) {\n        alert(e);\n      });\n    },\n    // 새 회원가입을 위한 빈 form을 만드는 메소드(변수 초기화)\n    newCustomer: function newCustomer() {\n      this.submitted = false;\n      this.customer = {};\n    },\n    //TODO: getRequestParams 추가 (springboot쪽으로 URL params 전송 )\n    // http://localhost:8000/api/tutorials?title=''&page=1&size=3\n    getRequestParams: function getRequestParams(searchTitle, page, pageSize) {\n      var params = {}; //searchTitle 값이 있으면 params객체에 title 로 저장\n\n      if (searchTitle) {\n        params[\"title\"] = searchTitle;\n      } //page 값이 있으면 params객체에 page 로 저장\n\n\n      if (page) {\n        params[\"page\"] = page - 1;\n      } //pageSize 값이 있으면 params객체에 size 로 저장\n\n\n      if (pageSize) {\n        params[\"size\"] = pageSize;\n      }\n\n      return params;\n    },\n    // TODO : 아래 메소드 수정\n    // TODO : getAll() => getAll(params)\n    retrieveTutorials: function retrieveTutorials() {\n      var _this2 = this;\n\n      var params = this.getRequestParams(this.searchTitle, this.page, this.pageSize); //TODO : 백엔드 쪽으로 전체 데이터 요청 (페이징 처리)\n\n      TutorialDataService.getAll(params).then(function (response) {\n        // TODO: 아래 수정\n        // 임시 변수 tutorials, totalItems (서버의 결과 데이터가 들어옴)\n        var _response$data = response.data,\n            tutorials = _response$data.tutorials,\n            totalItems = _response$data.totalItems;\n        _this2.tutorials = tutorials; // 객체\n\n        _this2.count = totalItems; // 총건수\n\n        console.log(response.data);\n      })[\"catch\"](function (e) {\n        console.log(e);\n      });\n    },\n    // TODO: 메소드 2개 추가 handlePageChange , handlePageSizeChange\n    //역할: 현재페이지 번호에 해당하는 데이터 다시 조회\n    handlePageChange: function handlePageChange(value) {\n      //페이지번호 저장\n      this.page = value; //다시 조회\n\n      this.retrieveTutorials();\n    },\n    //역할: 페이지당 건수가 변경되면 다시 조회하는 메소드\n    handlePageSizeChange: function handlePageSizeChange(event) {\n      //select 박스 변경시 값 가져옴 (이벤트로 가져옴)\n      //한 페이지당 건수 저장\n      this.pageSize = event.target.value; //첫페이지 초기화?\n\n      this.page = 1; //다시 조회\n\n      this.retrieveTutorials();\n    } // refreshList() {\n    //   this.retrieveTutorials();\n    //   this.currentTutorial = null;\n    //   this.currentIndex = -1;\n    // },\n    // setActiveTutorial(tutorial, index) {\n    //   this.currentTutorial = tutorial;\n    //   this.currentIndex = index;\n    // },\n    // removeAllTutorials() {\n    //   TutorialDataService.deleteAll()\n    //     .then(response => {\n    //       console.log(response.data);\n    //       this.refreshList();\n    //     })\n    //     .catch(e => {\n    //       console.log(e);\n    //     });\n    // },\n\n  },\n  mounted: function mounted() {\n    this.retrieveTutorials();\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkEA;AACA;AACA;AACA;AACA;AAEA;EACAA;IAAAC;IAAAC;IAAAC;EAAA,CADA;EAEAC,oBAFA;EAGAC,IAHA,kBAGA;IACA;IACA;MAEAC;QACAC,QADA;QAEAC,aAFA;QAGAC,YAHA;QAIAC,SAJA;QAKAC;MALA,CAFA;MASAC;IATA;EAWA,CAhBA;EAiBAC;IACA;IACAC,YAFA,0BAEA;MAAA;;MACA;MACA;QACAN,kCADA;QAEAC,gCAFA;QAGAC,0BAHA;QAIAC;MAJA,EAFA,CAQA;;MACAI,iCACA;MADA,CAEAC,IAFA,CAEA;QACA;QACA,uBAFA,CAEA;MACA,CALA,EAMA;MANA,UAOA;QACAC;MACA,CATA;IAUA,CArBA;IAsBA;IACAC,WAvBA,yBAuBA;MACA;MACA;IACA,CA1BA;IA2BA;IACA;IACAC,gBA7BA,4BA6BAC,WA7BA,EA6BAC,IA7BA,EA6BAC,QA7BA,EA6BA;MACA,gBADA,CAEA;;MACA;QACAC;MACA,CALA,CAMA;;;MACA;QACAA;MACA,CATA,CAUA;;;MACA;QACAA;MACA;;MACA;IACA,CA5CA;IA6CA;IACA;IACAC,iBA/CA,+BA+CA;MAAA;;MACA,mCACA,gBADA,EAEA,SAFA,EAGA,aAHA,EADA,CAMA;;MACAC,mCACAT,IADA,CACA;QACA;QACA;QACA;QAAA;QAAA;QACA,6BAJA,CAIA;;QACA,0BALA,CAKA;;QAEAU;MACA,CATA,WAUA;QACAA;MACA,CAZA;IAaA,CAnEA;IAqEA;IACA;IACAC,gBAvEA,4BAuEAC,KAvEA,EAuEA;MACA;MACA,kBAFA,CAGA;;MACA;IACA,CA5EA;IA6EA;IACAC,oBA9EA,gCA8EAC,KA9EA,EA8EA;MACA;MACA;MACA,mCAHA,CAIA;;MACA,cALA,CAMA;;MACA;IACA,CAtFA,CAuFA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;EA3GA,CAjBA;EA8HAC,OA9HA,qBA8HA;IACA;EACA;AAhIA","names":["components","Tutorial","AddTutorial","TutorialsList","name","data","customer","id","firstName","lastName","email","phone","submitted","methods","saveCustomer","CustomerDataService","then","alert","newCustomer","getRequestParams","searchTitle","page","pageSize","params","retrieveTutorials","TutorialDataService","console","handlePageChange","value","handlePageSizeChange","event","mounted"],"sourceRoot":"src/components/customermanager","sources":["AddCustomer.vue"],"sourcesContent":["<template>\r\n  <div class=\"container mt-3\">\r\n\r\n    <!--    새 회원가입일 경우 submitted = false -->\r\n    <div v-if=\"!submitted\">\r\n      <div class=\"mb-3\">\r\n        <label for=\"firstName\" class=\"form-label\">First Name</label>\r\n        <input\r\n          type=\"text\"\r\n          class=\"form-control\"\r\n          id=\"firstName\"\r\n          required\r\n          name=\"firstName\"\r\n          v-model=\"customer.firstName\"\r\n        />\r\n      </div>\r\n      <div class=\"mb-3\">\r\n        <label for=\"lastName\" class=\"form-label\">Last Name</label>\r\n        <input\r\n          type=\"text\"\r\n          class=\"form-control\"\r\n          id=\"lastName\"\r\n          required\r\n          name=\"lastName\"\r\n          v-model=\"customer.lastName\"\r\n        />\r\n      </div>\r\n      <div class=\"mb-3\">\r\n        <label for=\"email\" class=\"form-label\">Email</label>\r\n        <input\r\n          type=\"email\"\r\n          class=\"form-control\"\r\n          id=\"email\"\r\n          required\r\n          name=\"email\"\r\n          v-model=\"customer.email\"\r\n        />\r\n      </div>\r\n      <div class=\"mb-3\">\r\n        <label for=\"phone\" class=\"form-label\">Phone</label>\r\n        <input\r\n          type=\"text\"\r\n          class=\"form-control\"\r\n          id=\"phone\"\r\n          required\r\n          name=\"phone\"\r\n          v-model=\"customer.phone\"\r\n        />\r\n      </div>\r\n      <div class=\"mb-3\">\r\n        <button @click=\"saveCustomer\" class=\"btn btn-primary\">Submit</button>\r\n      </div>\r\n    </div>\r\n\r\n    <div v-else>\r\n      <div class=\"alert alert-success\" role=\"alert\">\r\n        Save customer successfully!\r\n      </div>\r\n      <button @click=\"newCustomer\" class=\"btn btn-primary\">\r\n        Add New Customer\r\n      </button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport CustomerDataService from \"@/services/CustomerDataService\";\r\nimport Tutorial from \"../tutorials/Tutorial.vue\";\r\nimport AddTutorial from \"../tutorials/AddTutorial.vue\";\r\nimport TutorialsList from \"../tutorials/TutorialsList.vue\";\r\nimport TutorialDataService from \"@/services/TutorialDataService\";\r\n\r\nexport default {\r\n  components: { Tutorial, AddTutorial, TutorialsList },\r\n  name: \"add-customer\",\r\n  data() {\r\n    // 객체 , 변수 초기화\r\n    return {\r\n      \r\n      customer: {\r\n        id: null,\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n        email: \"\",\r\n        phone: \"\",\r\n      },\r\n      submitted: false,\r\n    };\r\n  },\r\n  methods: {\r\n    // 저장 메소드 호출\r\n    saveCustomer() {\r\n      //  회원 임시 객체 만들기\r\n      var data = {\r\n        firstName: this.customer.firstName,\r\n        lastName: this.customer.lastName,\r\n        email: this.customer.email,\r\n        phone: this.customer.phone,\r\n      };\r\n      //  임시 회원 객체를 서버쪽으로 전달해서 DB에 insert 요청\r\n      CustomerDataService.create(data)\r\n        //  성공하면 then으로 들어옴\r\n        .then((response) => {\r\n          this.customer.id = response.data.id;\r\n          this.submitted = true; // DB insert 성공\r\n        })\r\n        //  실패하면 catch으로 에러메세지가 들어옴\r\n        .catch((e) => {\r\n          alert(e);\r\n        });\r\n    },\r\n    // 새 회원가입을 위한 빈 form을 만드는 메소드(변수 초기화)\r\n    newCustomer() {\r\n      this.submitted = false;\r\n      this.customer = {};\r\n    },\r\n    //TODO: getRequestParams 추가 (springboot쪽으로 URL params 전송 )\r\n    // http://localhost:8000/api/tutorials?title=''&page=1&size=3\r\n    getRequestParams(searchTitle, page, pageSize) {\r\n      let params = {};\r\n      //searchTitle 값이 있으면 params객체에 title 로 저장\r\n      if (searchTitle) {\r\n        params[\"title\"] = searchTitle;\r\n      }\r\n      //page 값이 있으면 params객체에 page 로 저장\r\n      if (page) {\r\n        params[\"page\"] = page - 1;\r\n      }\r\n      //pageSize 값이 있으면 params객체에 size 로 저장\r\n      if (pageSize) {\r\n        params[\"size\"] = pageSize;\r\n      }\r\n      return params;\r\n    },\r\n    // TODO : 아래 메소드 수정\r\n    // TODO : getAll() => getAll(params)\r\n    retrieveTutorials() {\r\n      const params = this.getRequestParams(\r\n        this.searchTitle,\r\n        this.page,\r\n        this.pageSize\r\n      );\r\n      //TODO : 백엔드 쪽으로 전체 데이터 요청 (페이징 처리)\r\n      TutorialDataService.getAll(params)\r\n        .then((response) => {\r\n          // TODO: 아래 수정\r\n          // 임시 변수 tutorials, totalItems (서버의 결과 데이터가 들어옴)\r\n          const { tutorials, totalItems } = response.data;\r\n          this.tutorials = tutorials; // 객체\r\n          this.count = totalItems; // 총건수\r\n\r\n          console.log(response.data);\r\n        })\r\n        .catch((e) => {\r\n          console.log(e);\r\n        });\r\n    },\r\n\r\n    // TODO: 메소드 2개 추가 handlePageChange , handlePageSizeChange\r\n    //역할: 현재페이지 번호에 해당하는 데이터 다시 조회\r\n    handlePageChange(value) {\r\n      //페이지번호 저장\r\n      this.page = value;\r\n      //다시 조회\r\n      this.retrieveTutorials();\r\n    },\r\n    //역할: 페이지당 건수가 변경되면 다시 조회하는 메소드\r\n    handlePageSizeChange(event) {\r\n      //select 박스 변경시 값 가져옴 (이벤트로 가져옴)\r\n      //한 페이지당 건수 저장\r\n      this.pageSize = event.target.value;\r\n      //첫페이지 초기화?\r\n      this.page = 1;\r\n      //다시 조회\r\n      this.retrieveTutorials();\r\n    },\r\n    // refreshList() {\r\n    //   this.retrieveTutorials();\r\n    //   this.currentTutorial = null;\r\n    //   this.currentIndex = -1;\r\n    // },\r\n\r\n    // setActiveTutorial(tutorial, index) {\r\n    //   this.currentTutorial = tutorial;\r\n    //   this.currentIndex = index;\r\n    // },\r\n\r\n    // removeAllTutorials() {\r\n    //   TutorialDataService.deleteAll()\r\n    //     .then(response => {\r\n    //       console.log(response.data);\r\n    //       this.refreshList();\r\n    //     })\r\n    //     .catch(e => {\r\n    //       console.log(e);\r\n    //     });\r\n    // },\r\n  },\r\n  mounted() {\r\n    this.retrieveTutorials();\r\n  },\r\n};\r\n</script>\r\n"]},"metadata":{},"sourceType":"module"}