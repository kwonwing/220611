{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport CustomerDataService from \"@/services/CustomerDataService\";\n/* eslint-disable */\n\nexport default {\n  name: \"customers\",\n  data: function data() {\n    return {\n      tutorials: [],\n      currentTutorial: null,\n      currentIndex: -1,\n      //TODO: title -> searchTitle\n      searchTitle: \"\",\n      //  TODO: 아래 변수 4개 추가\n      page: 1,\n      count: 0,\n      //pageSize :페이지당 건수\n      pageSize: 3,\n      //페이지당 건수(3,6,9건수)\n      pageSizes: [3, 6, 9],\n      customers: []\n    };\n  },\n  methods: {\n    // 모든 회원 조회 서비스 호출\n    retrieveCustomers: function retrieveCustomers() {\n      var _this = this;\n\n      // axios로 spring에 모든 회원 조회 요청\n      CustomerDataService.getAll() //  성공하면 then으로 서버(spring) 데이터(response.data)가 들어옴\n      .then(function (response) {\n        _this.customers = response.data;\n      }) //  실패하면 catch로 에러메세지가 들어옴\n      [\"catch\"](function (e) {\n        alert(e);\n      });\n    },\n    //TODO: getRequestParams 추가 (springboot쪽으로 URL params 전송 )\n    // http://localhost:8000/api/tutorials?title=''&page=1&size=3\n    getRequestParams: function getRequestParams(searchTitle, page, pageSize) {\n      var params = {}; //searchTitle 값이 있으면 params객체에 title 로 저장\n\n      if (searchTitle) {\n        params[\"title\"] = searchTitle;\n      } //page 값이 있으면 params객체에 page 로 저장\n\n\n      if (page) {\n        params[\"page\"] = page - 1;\n      } //pageSize 값이 있으면 params객체에 size 로 저장\n\n\n      if (pageSize) {\n        params[\"size\"] = pageSize;\n      }\n\n      return params;\n    },\n    // TODO : 아래 메소드 수정\n    // TODO : getAll() => getAll(params)\n    retrieveTutorials: function retrieveTutorials() {\n      var _this2 = this;\n\n      var params = this.getRequestParams(this.searchTitle, this.page, this.pageSize); //TODO : 백엔드 쪽으로 전체 데이터 요청 (페이징 처리)\n\n      TutorialDataService.getAll(params).then(function (response) {\n        // TODO: 아래 수정\n        // 임시 변수 tutorials, totalItems (서버의 결과 데이터가 들어옴)\n        var _response$data = response.data,\n            tutorials = _response$data.tutorials,\n            totalItems = _response$data.totalItems;\n        _this2.tutorials = tutorials; // 객체\n\n        _this2.count = totalItems; // 총건수\n\n        console.log(response.data);\n      })[\"catch\"](function (e) {\n        console.log(e);\n      });\n    },\n    // TODO: 메소드 2개 추가 handlePageChange , handlePageSizeChange\n    //역할: 현재페이지 번호에 해당하는 데이터 다시 조회\n    handlePageChange: function handlePageChange(value) {\n      //페이지번호 저장\n      this.page = value; //다시 조회\n\n      this.retrieveTutorials();\n    },\n    //역할: 페이지당 건수가 변경되면 다시 조회하는 메소드\n    handlePageSizeChange: function handlePageSizeChange(event) {\n      //select 박스 변경시 값 가져옴 (이벤트로 가져옴)\n      //한 페이지당 건수 저장\n      this.pageSize = event.target.value; //첫페이지 초기화?\n\n      this.page = 1; //다시 조회\n\n      this.retrieveTutorials();\n    } // refreshList() {\n    //   this.retrieveTutorials();\n    //   this.currentTutorial = null;\n    //   this.currentIndex = -1;\n    // },\n    // setActiveTutorial(tutorial, index) {\n    //   this.currentTutorial = tutorial;\n    //   this.currentIndex = index;\n    // },\n    // removeAllTutorials() {\n    //   TutorialDataService.deleteAll()\n    //     .then(response => {\n    //       console.log(response.data);\n    //       this.refreshList();\n    //     })\n    //     .catch(e => {\n    //       console.log(e);\n    //     });\n    // },\n\n  },\n  //화면이 뜨자마자 실행되는 이벤트(모든 회원조회가 실행됨)\n  mounted: function mounted() {\n    this.retrieveCustomers();\n    this.retrieveTutorials();\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiGA;AAEA;;AACA;EACAA,iBADA;EAEAC,IAFA,kBAEA;IACA;MACAC,aADA;MAEAC,qBAFA;MAGAC,gBAHA;MAIA;MACAC,eALA;MAMA;MACAC,OAPA;MAQAC,QARA;MASA;MACAC,WAVA;MAWA;MACAC,oBAZA;MAcAC;IAdA;EAgBA,CAnBA;EAoBAC;IACA;IACAC,iBAFA,+BAEA;MAAA;;MACA;MACAC,6BACA;MADA,CAEAC,IAFA,CAEA;QACA;MACA,CAJA,EAKA;MALA,UAMA;QACAC;MACA,CARA;IASA,CAbA;IAcA;IACA;IACAC,gBAhBA,4BAgBAX,WAhBA,EAgBAC,IAhBA,EAgBAE,QAhBA,EAgBA;MACA,gBADA,CAEA;;MACA;QACAS;MACA,CALA,CAMA;;;MACA;QACAA;MACA,CATA,CAUA;;;MACA;QACAA;MACA;;MACA;IACA,CA/BA;IAgCA;IACA;IACAC,iBAlCA,+BAkCA;MAAA;;MACA,mCACA,gBADA,EAEA,SAFA,EAGA,aAHA,EADA,CAMA;;MACAC,mCACAL,IADA,CACA;QACA;QACA;QACA;QAAA;QAAA;QACA,6BAJA,CAIA;;QACA,0BALA,CAKA;;QAEAM;MACA,CATA,WAUA;QACAA;MACA,CAZA;IAaA,CAtDA;IAwDA;IACA;IACAC,gBA1DA,4BA0DAC,KA1DA,EA0DA;MACA;MACA,kBAFA,CAGA;;MACA;IACA,CA/DA;IAgEA;IACAC,oBAjEA,gCAiEAC,KAjEA,EAiEA;MACA;MACA;MACA,mCAHA,CAIA;;MACA,cALA,CAMA;;MACA;IACA,CAzEA,CA0EA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;EA9FA,CApBA;EAoHA;EACAC,OArHA,qBAqHA;IACA;IACA;EACA;AAxHA","names":["name","data","tutorials","currentTutorial","currentIndex","searchTitle","page","count","pageSize","pageSizes","customers","methods","retrieveCustomers","CustomerDataService","then","alert","getRequestParams","params","retrieveTutorials","TutorialDataService","console","handlePageChange","value","handlePageSizeChange","event","mounted"],"sourceRoot":"src/components/customermanager","sources":["CustomerList.vue"],"sourcesContent":["<template>\r\n  <div  class=\"container mt-3 \">\r\n        <!-- 페이징 추가 시작  -->\r\n    <div class=\"mb-3\">\r\n      <div class=\"col-md-8\">\r\n        <div class=\"input-group mb-3\">\r\n          <!--        TODO : 수정 시작 #1-->\r\n          <input\r\n            type=\"text\"\r\n            class=\"form-control\"\r\n            placeholder=\"Search by title\"\r\n            v-model=\"searchTitle\"\r\n          />\r\n          <div class=\"input-group-append\">\r\n            <button\r\n              class=\"btn btn-outline-secondary\"\r\n              type=\"button\"\r\n              @click=\"\r\n                page = 1;\r\n                retrieveTutorials();\r\n              \"\r\n            >\r\n              Search\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!--    TODO: 태그 추가 -->\r\n      <div class=\"col-md-12\">\r\n        <div class=\"mb-3\">\r\n          Items per Page :\r\n          <select v-model=\"pageSize\" @change=\"handlePageSizeChange($event)\">\r\n            <option v-for=\"size in pageSize\" :key=\"size\" :value=\"size\">\r\n              {{ size }}\r\n            </option>\r\n          </select>\r\n        </div>\r\n\r\n        <!--      TODO: page bar 추가-->\r\n        <b-pagination\r\n          v-model=\"page\"\r\n          :total-rows=\"count\"\r\n          :per-page=\"pageSize\"\r\n          prev-text=\"Prev\"\r\n          next-text=\"Next\"\r\n          @change=\"handlePageChange\"\r\n        >\r\n        </b-pagination>\r\n      </div>\r\n      <!--    TODO: page bar 끝-->\r\n      <!-- <div class=\"col-md-6\">\r\n        <h4>Tutorials List</h4>\r\n        <ul class=\"list-group\">\r\n          <li\r\n            class=\"list-group-item\"\r\n            :class=\"{ active: index == currentIndex }\"\r\n            v-for=\"(tutorial, index) in tutorials\"\r\n            :key=\"index\"\r\n            @click=\"setActiveTutorial(tutorial, index)\"\r\n          >\r\n            {{ tutorial.title }}\r\n          </li>\r\n        </ul>\r\n      </div> -->\r\n    </div>\r\n    <table class=\"table\">\r\n      <thead>\r\n      <tr>\r\n        <th scope=\"col\">First Name</th>\r\n        <th scope=\"col\">Last Name</th>\r\n        <th scope=\"col\">Email</th>\r\n        <th scope=\"col\">Phone</th>\r\n        <th scope=\"col\">Actions</th>\r\n      </tr>\r\n      </thead>\r\n<!--      조회 데이터 생성 부분-->\r\n      <tbody v-for=\"(customer, index) in customers\"\r\n             :key=\"index\"\r\n        >\r\n      <tr>\r\n        <td>{{ customer.firstName }}</td>\r\n        <td>{{ customer.lastName }}</td>\r\n        <td>{{ customer.email }}</td>\r\n        <td>{{ customer.phone }}</td>\r\n        <td>\r\n          <a :href=\"'/customers/' + customer.id\" class=\"btn btn-primary\">\r\n            Edit\r\n          </a>\r\n        </td>\r\n      </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport CustomerDataService from \"@/services/CustomerDataService\";\r\n\r\n/* eslint-disable */\r\nexport default {\r\n  name: \"customers\",\r\n  data() {\r\n    return {\r\n      tutorials: [],\r\n      currentTutorial: null,\r\n      currentIndex: -1,\r\n      //TODO: title -> searchTitle\r\n      searchTitle: \"\",\r\n      //  TODO: 아래 변수 4개 추가\r\n      page: 1,\r\n      count: 0,\r\n      //pageSize :페이지당 건수\r\n      pageSize: 3,\r\n      //페이지당 건수(3,6,9건수)\r\n      pageSizes: [3, 6, 9],\r\n\r\n      customers: []\r\n    }\r\n  },\r\n  methods: {\r\n    // 모든 회원 조회 서비스 호출\r\n    retrieveCustomers() {\r\n      // axios로 spring에 모든 회원 조회 요청\r\n      CustomerDataService.getAll()\r\n          //  성공하면 then으로 서버(spring) 데이터(response.data)가 들어옴\r\n          .then(response => {\r\n            this.customers = response.data;\r\n          })\r\n    //  실패하면 catch로 에러메세지가 들어옴\r\n          .catch( e => {\r\n            alert(e);\r\n          })\r\n    },\r\n    //TODO: getRequestParams 추가 (springboot쪽으로 URL params 전송 )\r\n    // http://localhost:8000/api/tutorials?title=''&page=1&size=3\r\n    getRequestParams(searchTitle, page, pageSize) {\r\n      let params = {};\r\n      //searchTitle 값이 있으면 params객체에 title 로 저장\r\n      if (searchTitle) {\r\n        params[\"title\"] = searchTitle;\r\n      }\r\n      //page 값이 있으면 params객체에 page 로 저장\r\n      if (page) {\r\n        params[\"page\"] = page - 1;\r\n      }\r\n      //pageSize 값이 있으면 params객체에 size 로 저장\r\n      if (pageSize) {\r\n        params[\"size\"] = pageSize;\r\n      }\r\n      return params;\r\n    },\r\n    // TODO : 아래 메소드 수정\r\n    // TODO : getAll() => getAll(params)\r\n    retrieveTutorials() {\r\n      const params = this.getRequestParams(\r\n        this.searchTitle,\r\n        this.page,\r\n        this.pageSize\r\n      );\r\n      //TODO : 백엔드 쪽으로 전체 데이터 요청 (페이징 처리)\r\n      TutorialDataService.getAll(params)\r\n        .then((response) => {\r\n          // TODO: 아래 수정\r\n          // 임시 변수 tutorials, totalItems (서버의 결과 데이터가 들어옴)\r\n          const { tutorials, totalItems } = response.data;\r\n          this.tutorials = tutorials; // 객체\r\n          this.count = totalItems; // 총건수\r\n\r\n          console.log(response.data);\r\n        })\r\n        .catch((e) => {\r\n          console.log(e);\r\n        });\r\n    },\r\n\r\n    // TODO: 메소드 2개 추가 handlePageChange , handlePageSizeChange\r\n    //역할: 현재페이지 번호에 해당하는 데이터 다시 조회\r\n    handlePageChange(value) {\r\n      //페이지번호 저장\r\n      this.page = value;\r\n      //다시 조회\r\n      this.retrieveTutorials();\r\n    },\r\n    //역할: 페이지당 건수가 변경되면 다시 조회하는 메소드\r\n    handlePageSizeChange(event) {\r\n      //select 박스 변경시 값 가져옴 (이벤트로 가져옴)\r\n      //한 페이지당 건수 저장\r\n      this.pageSize = event.target.value;\r\n      //첫페이지 초기화?\r\n      this.page = 1;\r\n      //다시 조회\r\n      this.retrieveTutorials();\r\n    },\r\n    // refreshList() {\r\n    //   this.retrieveTutorials();\r\n    //   this.currentTutorial = null;\r\n    //   this.currentIndex = -1;\r\n    // },\r\n\r\n    // setActiveTutorial(tutorial, index) {\r\n    //   this.currentTutorial = tutorial;\r\n    //   this.currentIndex = index;\r\n    // },\r\n\r\n    // removeAllTutorials() {\r\n    //   TutorialDataService.deleteAll()\r\n    //     .then(response => {\r\n    //       console.log(response.data);\r\n    //       this.refreshList();\r\n    //     })\r\n    //     .catch(e => {\r\n    //       console.log(e);\r\n    //     });\r\n    // },\r\n  },\r\n  //화면이 뜨자마자 실행되는 이벤트(모든 회원조회가 실행됨)\r\n  mounted() {\r\n    this.retrieveCustomers();\r\n    this.retrieveTutorials();\r\n  }\r\n}\r\n</script>"]},"metadata":{},"sourceType":"module"}